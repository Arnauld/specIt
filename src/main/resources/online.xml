<section>
<p style="text-align: justify;">Dans notre précédent article (<a href="http://www.arolla.fr/blog/?p=707">Le BDD qu'est ce que c'est?</a>), nous avons vu ce qu'était le <strong>BDD</strong>, son intérêt et le formalisme généralement adopté. Pas mal de théorie pour placer le contexte, tout ça c'est bien, mais ça manquait un peu de code, du graisseux !</p>
<p style="text-align: justify;"><strong>Allez, on code !</strong></p>

<h2 style="text-align: justify;">Mise en place de notre environnement</h2>
<p style="text-align: justify;">Commençons par créer un nouveau projet Maven et ajoutons les dépendances nécessaires dans notre descripteur de projet (pom.xml):</p>

<div class="highlight"><pre><code class="xml"><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span>
  <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
  <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 </span>
  <span class="s">                      http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>

  <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>jbehave-get-started<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>bdd101<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>

  <span class="c">&lt;!-- ************************************************ --&gt;</span>
  <span class="c">&lt;!-- *~~~~~~~~~~~~~~~~~PROPERTIES~~~~~~~~~~~~~~~~~~~* --&gt;</span>
  <span class="c">&lt;!-- ************************************************ --&gt;</span>
  <span class="nt">&lt;properties&gt;</span>
  <span class="nt">&lt;maven.compiler.source&gt;</span>1.6<span class="nt">&lt;/maven.compiler.source&gt;</span>
  <span class="nt">&lt;maven.compiler.target&gt;</span>1.6<span class="nt">&lt;/maven.compiler.target&gt;</span>
  <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>

  <span class="c">&lt;!-- lib versions --&gt;</span>
  <span class="nt">&lt;hamcrest.version&gt;</span>1.2<span class="nt">&lt;/hamcrest.version&gt;</span>
  <span class="nt">&lt;spring.version&gt;</span>3.1.1.RELEASE<span class="nt">&lt;/spring.version&gt;</span>
  <span class="nt">&lt;slf4j.version&gt;</span>1.6.4<span class="nt">&lt;/slf4j.version&gt;</span>
  <span class="nt">&lt;jbehave.version&gt;</span>3.6.6<span class="nt">&lt;/jbehave.version&gt;</span>
  <span class="nt">&lt;/properties&gt;</span>

  <span class="c">&lt;!-- ************************************************ --&gt;</span>
  <span class="c">&lt;!-- *~~~~~~~~~~~~~~~~DEPENDENCIES~~~~~~~~~~~~~~~~~~* --&gt;</span>
  <span class="c">&lt;!-- ************************************************ --&gt;</span>
  <span class="nt">&lt;dependencies&gt;</span>
  <span class="c">&lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;</span>
  <span class="c">&lt;!-- ~~~~~~~~~~~~~Commons~~~~~~~~~~~~~~~ --&gt;</span>
  <span class="c">&lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;</span>
  <span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>org.apache.commons<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>commons-lang3<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;version&gt;</span>3.1<span class="nt">&lt;/version&gt;</span>
  <span class="nt">&lt;/dependency&gt;</span>

  <span class="c">&lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;</span>
  <span class="c">&lt;!-- ~~~~~~~~~~~~~~Spring~~~~~~~~~~~~~~~ --&gt;</span>
  <span class="c">&lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;</span>
  <span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;/dependency&gt;</span>

  <span class="c">&lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;</span>
  <span class="c">&lt;!-- ~~~~~~~~~~~~~~~~Log~~~~~~~~~~~~~~~~ --&gt;</span>
  <span class="c">&lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;</span>
  <span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>org.slf4j<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>log4j-over-slf4j<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;version&gt;</span>${slf4j.version}<span class="nt">&lt;/version&gt;</span>
  <span class="nt">&lt;/dependency&gt;</span>

  <span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>ch.qos.logback<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>logback-classic<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;version&gt;</span>1.0.0<span class="nt">&lt;/version&gt;</span>
  <span class="nt">&lt;/dependency&gt;</span>

  <span class="c">&lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;</span>
  <span class="c">&lt;!-- ~~~~~~~~~~~~~JBehave~~~~~~~~~~~~~~~ --&gt;</span>
  <span class="c">&lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;</span>
  <span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>org.jbehave<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>jbehave-core<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;version&gt;</span>${jbehave.version}<span class="nt">&lt;/version&gt;</span>
  <span class="nt">&lt;/dependency&gt;</span>

  <span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>org.jbehave<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>jbehave-spring<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;version&gt;</span>${jbehave.version}<span class="nt">&lt;/version&gt;</span>
  <span class="nt">&lt;/dependency&gt;</span>

  <span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>de.codecentric<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>jbehave-junit-runner<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;version&gt;</span>1.0.1-SNAPSHOT<span class="nt">&lt;/version&gt;</span>
  <span class="nt">&lt;/dependency&gt;</span>

  <span class="c">&lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;</span>
  <span class="c">&lt;!-- ~~~~~~~~~~~~~~~Test~~~~~~~~~~~~~~~~ --&gt;</span>
  <span class="c">&lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;</span>
  <span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>junit-dep<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;/dependency&gt;</span>
  <span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>org.hamcrest<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>hamcrest-library<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;/dependency&gt;</span>
  <span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>org.hamcrest<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>hamcrest-core<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;/dependency&gt;</span>
  <span class="nt">&lt;/dependencies&gt;</span>

  <span class="c">&lt;!-- ************************************************ --&gt;</span>
  <span class="c">&lt;!-- *~~~~~~~~~~~DEPENDENCY MANAGEMENT~~~~~~~~~~~~~~* --&gt;</span>
  <span class="c">&lt;!-- ************************************************ --&gt;</span>
  <span class="nt">&lt;dependencyManagement&gt;</span>
  <span class="nt">&lt;dependencies&gt;</span>
  <span class="c">&lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;</span>
  <span class="c">&lt;!-- ~~~~~~~~~~~~~~Spring~~~~~~~~~~~~~~~ --&gt;</span>
  <span class="c">&lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;</span>
  <span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;version&gt;</span>${spring.version}<span class="nt">&lt;/version&gt;</span>
  <span class="nt">&lt;/dependency&gt;</span>

  <span class="c">&lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;</span>
  <span class="c">&lt;!-- ~~~~~~~~~~~~~~~Test~~~~~~~~~~~~~~~~ --&gt;</span>
  <span class="c">&lt;!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ --&gt;</span>
  <span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>junit-dep<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;version&gt;</span>4.10<span class="nt">&lt;/version&gt;</span>
  <span class="nt">&lt;/dependency&gt;</span>
  <span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>org.hamcrest<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>hamcrest-library<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;version&gt;</span>${hamcrest.version}<span class="nt">&lt;/version&gt;</span>
  <span class="nt">&lt;/dependency&gt;</span>
  <span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>org.hamcrest<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>hamcrest-core<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;version&gt;</span>${hamcrest.version}<span class="nt">&lt;/version&gt;</span>
  <span class="nt">&lt;/dependency&gt;</span>
  <span class="nt">&lt;/dependencies&gt;</span>
  <span class="nt">&lt;/dependencyManagement&gt;</span>

  <span class="c">&lt;!-- ************************************************ --&gt;</span>
  <span class="c">&lt;!-- *~~~~~~~~~~~~~~~~~REPOSITORIES~~~~~~~~~~~~~~~~~* --&gt;</span>
  <span class="c">&lt;!-- ************************************************ --&gt;</span>
  <span class="nt">&lt;repositories&gt;</span>
  <span class="nt">&lt;repository&gt;</span>
  <span class="nt">&lt;id&gt;</span>codehaus-releases<span class="nt">&lt;/id&gt;</span>
  <span class="nt">&lt;name&gt;</span>Codehaus Nexus Repository Manager<span class="nt">&lt;/name&gt;</span>
  <span class="nt">&lt;url&gt;</span>https://nexus.codehaus.org/content/repositories/releases/<span class="nt">&lt;/url&gt;</span>
  <span class="nt">&lt;/repository&gt;</span>
  <span class="nt">&lt;repository&gt;</span>
  <span class="nt">&lt;id&gt;</span>sonatype-snapshots<span class="nt">&lt;/id&gt;</span>
  <span class="nt">&lt;name&gt;</span>Sonatype Snapshots<span class="nt">&lt;/name&gt;</span>
  <span class="nt">&lt;url&gt;</span>https://oss.sonatype.org/content/repositories/snapshots/<span class="nt">&lt;/url&gt;</span>
  <span class="nt">&lt;/repository&gt;</span>
  <span class="nt">&lt;/repositories&gt;</span>

  <span class="nt">&lt;/project&gt;</span>
</code></pre>
</div>
<p style="text-align: justify;">On notera les dépendances à <code>JBehave</code>, quelques utilitaires pour simplifier l'écriture de nos tests,et <code>Spring</code> pour l'injection de dépendance.</p>
<p style="text-align: justify;">On retiendra aussi la dépendance à <code>jbehave-junit-runner</code> qui permet une intégration encore plus riche avec Junit en utilisant un lanceur spécial: <code>de.codecentric.jbehave.junit.monitoring.JUnitReportingRunner</code>. <strong>Ce lanceur permet de visualiser chaque étape de chaque scénario comme un test spécifique, il est ainsi beaucoup plus facile d'identifier à quelle étape notre scénario a échoué.</strong> De plus, cela s'intègre parfaitement avec la vue Eclipse, JUnit permettant un retour immédiat lorsque les tests sont exécutés directement depuis l'IDE. La page du projet correspondant peut être trouvée ici: <a href="https://github.com/codecentric/jbehave-junit-runner">Code Centric ~ jbehave-junit-runner</a></p>
<p style="text-align: justify;">Comme nous nous baserons uniquement sur les annotations <em>Spring</em> pour l'injection de dépendances et la définition de nos étapes, nous nous passerons de fichier de configuration <em>Spring</em>. Le contexte sera directement initialisé par la méthode suivante:</p>

<div class="highlight"><pre><code class="java"><span class="kd">public</span> <span class="kd">static</span> <span class="n">AnnotationConfigApplicationContext</span>
  <span class="nf">createContextFromBasePackages</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">basePackages</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">AnnotationConfigApplicationContext</span> <span class="n">applicationContext</span> <span class="o">=</span>
  <span class="k">new</span> <span class="nf">AnnotationConfigApplicationContext</span><span class="o">();</span>
  <span class="n">applicationContext</span><span class="o">.</span><span class="na">scan</span><span class="o">(</span><span class="n">basePackages</span><span class="o">);</span>
  <span class="n">applicationContext</span><span class="o">.</span><span class="na">refresh</span><span class="o">();</span>
  <span class="k">return</span> <span class="n">applicationContext</span><span class="o">;</span>
  <span class="o">}</span>
</code></pre>
</div>
<p style="text-align: justify;">Voila pour l'infrastructure, il nous reste à définir la classe qui lancera nos scénarios. Nous nous baserons pour cela sur le framework <em>JUnit</em> pour lequel jbehave fournit les adaptateurs nécessaires.</p>
<p style="text-align: justify;">Au risque de faire un peu peur au début, nous opterons tout de suite pour une description assez riche de notre environnement de tests. <em>JBehave</em> fournit de multiples façons diverses et variées pour configurer l'environnement d'exécution des scénarios, nous choisissons ici la moins "magique" mais la plus verbeuse et surtout celle qui permet un contrôle total de chaque composant.</p>

<div class="highlight"><pre><code class="java"><span class="lineno"> 1</span> <span class="o">...</span>
  <span class="lineno"> 2</span>
  <span class="lineno"> 3</span> <span class="kn">import</span> <span class="nn">bdd101.util.Springs</span><span class="o">;</span>
  <span class="lineno"> 4</span> <span class="kn">import</span> <span class="nn">bdd101.util.UTF8StoryLoader</span><span class="o">;</span>
  <span class="lineno"> 5</span> <span class="kn">import</span> <span class="nn">de.codecentric.jbehave.junit.monitoring.JUnitReportingRunner</span><span class="o">;</span>
  <span class="lineno"> 6</span>
  <span class="lineno"> 7</span> <span class="nd">@RunWith</span><span class="o">(</span><span class="n">JUnitReportingRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
  <span class="lineno"> 8</span> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">AllStoriesTest</span> <span class="kd">extends</span> <span class="n">JUnitStories</span> <span class="o">{</span>
  <span class="lineno"> 9</span>
  <span class="lineno">10</span>     <span class="kd">private</span> <span class="kd">final</span> <span class="n">CrossReference</span> <span class="n">xref</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CrossReference</span><span class="o">();</span>
  <span class="lineno">11</span>
  <span class="lineno">12</span>     <span class="kd">public</span> <span class="nf">AllStoriesTest</span><span class="o">()</span> <span class="o">{</span>
  <span class="lineno">13</span>         <span class="n">configuredEmbedder</span><span class="o">()</span><span class="c1">//</span>
  <span class="lineno">14</span>                 <span class="o">.</span><span class="na">embedderControls</span><span class="o">()</span><span class="c1">//</span>
  <span class="lineno">15</span>                 <span class="o">.</span><span class="na">doGenerateViewAfterStories</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span><span class="c1">//</span>
  <span class="lineno">16</span>                 <span class="o">.</span><span class="na">doIgnoreFailureInStories</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span><span class="c1">//</span>
  <span class="lineno">17</span>                 <span class="o">.</span><span class="na">doIgnoreFailureInView</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span><span class="c1">//</span>
  <span class="lineno">18</span>                 <span class="o">.</span><span class="na">doVerboseFailures</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span><span class="c1">//</span>
  <span class="lineno">19</span>                 <span class="o">.</span><span class="na">useThreads</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span><span class="c1">//</span>
  <span class="lineno">20</span>                 <span class="o">.</span><span class="na">useStoryTimeoutInSecs</span><span class="o">(</span><span class="mi">60</span><span class="o">);</span>
  <span class="lineno">21</span>     <span class="o">}</span>
  <span class="lineno">22</span>
  <span class="lineno">23</span>     <span class="nd">@Override</span>
  <span class="lineno">24</span>     <span class="kd">public</span> <span class="n">Configuration</span> <span class="nf">configuration</span><span class="o">()</span> <span class="o">{</span>
  <span class="lineno">25</span>         <span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Embeddable</span><span class="o">&gt;</span> <span class="n">embeddableClass</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
  <span class="lineno">26</span>         <span class="n">URL</span> <span class="n">codeLocation</span> <span class="o">=</span> <span class="n">codeLocationFromClass</span><span class="o">(</span><span class="n">embeddableClass</span><span class="o">);</span>
  <span class="lineno">27</span>         <span class="n">StoryReporterBuilder</span> <span class="n">storyReporter</span> <span class="o">=</span> <span class="c1">//</span>
  <span class="lineno">28</span>         <span class="k">new</span> <span class="nf">StoryReporterBuilder</span><span class="o">()</span> <span class="c1">//</span>
  <span class="lineno">29</span>                 <span class="o">.</span><span class="na">withCodeLocation</span><span class="o">(</span><span class="n">codeLocation</span><span class="o">)</span> <span class="c1">//</span>
  <span class="lineno">30</span>                 <span class="o">.</span><span class="na">withDefaultFormats</span><span class="o">()</span> <span class="c1">//</span>
  <span class="lineno">31</span>                 <span class="o">.</span><span class="na">withFormats</span><span class="o">(</span><span class="n">CONSOLE</span><span class="o">,</span> <span class="c1">//</span>
  <span class="lineno">32</span>                         <span class="n">HTML_TEMPLATE</span><span class="o">)</span> <span class="c1">//</span>
  <span class="lineno">33</span>                 <span class="o">.</span><span class="na">withFailureTrace</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="c1">//</span>
  <span class="lineno">34</span>                 <span class="o">.</span><span class="na">withFailureTraceCompression</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="c1">//</span>
  <span class="lineno">35</span>                 <span class="o">.</span><span class="na">withCrossReference</span><span class="o">(</span><span class="n">xref</span><span class="o">)</span>
  <span class="lineno">36</span>                 <span class="o">;</span>
  <span class="lineno">37</span>         <span class="k">return</span> <span class="k">new</span> <span class="nf">MostUsefulConfiguration</span><span class="o">()</span> <span class="c1">//</span>
  <span class="lineno">38</span>                 <span class="o">.</span><span class="na">useStoryLoader</span><span class="o">(</span><span class="k">new</span> <span class="n">UTF8StoryLoader</span><span class="o">(</span><span class="n">embeddableClass</span><span class="o">))</span> <span class="c1">//</span>
  <span class="lineno">39</span>                 <span class="o">.</span><span class="na">useStoryReporterBuilder</span><span class="o">(</span><span class="n">storyReporter</span><span class="o">)</span> <span class="c1">//</span>
  <span class="lineno">40</span>                 <span class="o">.</span><span class="na">useStepMonitor</span><span class="o">(</span><span class="n">xref</span><span class="o">.</span><span class="na">getStepMonitor</span><span class="o">())</span><span class="c1">//</span>
  <span class="lineno">41</span>                 <span class="o">;</span>
  <span class="lineno">42</span>     <span class="o">}</span>
  <span class="lineno">43</span>
  <span class="lineno">44</span>     <span class="nd">@Override</span>
  <span class="lineno">45</span>     <span class="kd">protected</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">storyPaths</span><span class="o">()</span> <span class="o">{</span>
  <span class="lineno">46</span>         <span class="n">URL</span> <span class="n">searchInURL</span> <span class="o">=</span> <span class="n">codeLocationFromClass</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
  <span class="lineno">47</span>         <span class="k">return</span> <span class="k">new</span> <span class="nf">StoryFinder</span><span class="o">().</span><span class="na">findPaths</span><span class="o">(</span><span class="n">searchInURL</span><span class="o">,</span> <span class="s">&quot;**/*.story&quot;</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
  <span class="lineno">48</span>     <span class="o">}</span>
  <span class="lineno">49</span>
  <span class="lineno">50</span>     <span class="nd">@Override</span>
  <span class="lineno">51</span>     <span class="kd">public</span> <span class="n">InjectableStepsFactory</span> <span class="nf">stepsFactory</span><span class="o">()</span> <span class="o">{</span>
  <span class="lineno">52</span>         <span class="k">return</span> <span class="k">new</span> <span class="nf">SpringStepsFactory</span><span class="o">(</span><span class="n">configuration</span><span class="o">(),</span>
  <span class="lineno">53</span>                 <span class="n">Springs</span><span class="o">.</span><span class="na">createAnnotatedContextFromBasePackages</span><span class="o">(</span><span class="s">&quot;bdd101&quot;</span><span class="o">));</span>
  <span class="lineno">54</span>     <span class="o">}</span>
  <span class="lineno">55</span> <span class="o">}</span>
</code></pre>
</div>
<p style="text-align: justify;">Quelques explications:</p>

<ul style="text-align: justify;">
	<li>L'annotation <code>@RunWith(JUnitReportingRunner.class)</code> indique à <em>JUnit</em> le lanceur qui doit être utilisé pour exécuter notre test.</li>
	<li>Le nom de notre classe finit par <code>Test</code> afin de suivre les conventions usuelles et étend la classe JBehave: <code>JUnitStories</code> afin de faciliter l'intégration JUnit/JBehave.</li>
	<li>Notre constructeur définit l'<code>Embedder</code> JBehave (c'est à dire l'environnement global d'exécution des tests JBehave) qui sera utilisé. Nous verrons les options activées au fur et à mesure de notre article. Ce qu'il faut retenir, c'est que <strong>ces paramètres permettent de contrôler l'exécution des tests</strong> (<code>useStoryTimeoutInSecs</code>, <code>useThreads</code>) et la perception globale des tests (<code>doVerboseFailures</code>) : un test en échec arrête-t-il l'exécution (<code>doIgnoreFailureInStories</code>) ou est-ce lors de la génération du rapport consolidé (<code>doGenerateViewAfterStories</code>) que l'on considérera que l'exécution est en échec (<code>doIgnoreFailureInView</code>) ?
Chaque test <em>JBehave</em> étant lancé de manière indépendante, à la fin de chaque test, <em>JBehave</em> consolide les résultats dans un unique rapport.</li>
	<li>Vient ensuite la seconde partie de la configuration de notre environnement d'exécution. On retiendra pour le moment deux paramètres importants:
<ul>
	<li>les types de rapport qui seront générés, avec notamment la sortie <code>CONSOLE</code> qui facilitera la phase de développement dans notre IDE, et la sortie <code>HTML_TEMPLATE</code> que nous verrons plus tard et qui permet d'avoir un joli rapport html.</li>
	<li>L'utilisation d'une classe spéciale <code>UTF8StoryLoader</code> qui nous permettra de nous affranchir des problématiques d'encodage qui peuvent apparaître dans le cas de développement multi-plateforme. On impose ici l'utilisation systématique de l'UTF8, ce qui correspond au choix que nous avons fait dans notre fichier <code>pom.xml</code> de maven.</li>
</ul>
</li>
	<li>On trouve ensuite la méthode permettant de récupérer la liste des fichiers <code>*.story </code>à exécuter. Il y (au moins) deux pièges dans cette déclaration:
<ul>
	<li>Le premier (qui est aussi directement lié à l'utilisation de notre classe <code>UTF8StoryLoader</code>) est que les fichiers seront chargés comme ressources Java, il convient donc d'indiquer des chemins relatifs à notre classpath. Ce qui nous amène au second piège:</li>
	<li>La méthode utilisée ici se base sur l'emplacement de notre classe de test, il est donc important de placer nos fichiers <code>*.story</code> dans les ressources maven correspondantes: <code>src/test/resources</code> (copiées dans <code>target/test-classes</code>) si notre lanceur est dans un package de <code>src/test/java</code>, ou <code>src/main/resources</code> (copiées dans <code>target/classes</code>) si notre lanceur est dans un package de <code>src/main/java</code>.</li>
</ul>
</li>
</ul>
<h2 style="text-align: justify;">Notre premier scénario</h2>
<p style="text-align: justify;">Commençons simplement par le développement d'une petite calculatrice.</p>
<p style="text-align: justify;">Écrivons notre premier scénario <code>src/test/resources/stories/calculator.story</code>:</p>

<div class="highlight"><pre><code class="Gherkin"><span class="k">Scenario:</span><span class="nf"> 2+2</span>

  <span class="k">Given </span><span class="nf">a variable x with value </span><span class="s">2</span><span class="nf"></span>
  <span class="k">When </span><span class="nf">I add </span><span class="s">2</span><span class="nf"> to x</span>
  <span class="k">Then </span><span class="nf">x should equal to </span><span class="s">4</span><span class="nf"></span>
</code></pre>
</div>
<p style="text-align: justify;"><img src="http://www.arolla.fr/blog/wp-content/uploads/2012/06/000-calculator-no-step-def.png" alt="Editeur Eclipse de scenario" /></p>
<p style="text-align: justify;"><img style="float: left; margin: 5px;" src="http://www.arolla.fr/blog/wp-content/uploads/2012/06/plugin-astuce.png" alt="Astuce du plugin JBehave" width="110px" /> On peux constater que toutes nos étapes sont soulignées en rouge pour indiquer que notre éditeur n'est pas parvenu à les associer au code java correspondant.</p>
<p style="text-align: justify;">Exécutons notre lanceur de scénario: <code>Run as / JUnit Test</code> sur la classe <code>AllStoriesTest</code>.</p>
<p style="text-align: justify;"><img src="http://www.arolla.fr/blog/wp-content/uploads/2012/06/000-junit-runner.png" alt="Vue JUnit Eclipse" /></p>
<p style="text-align: justify;">La console Eclipse (Rappel: la sortie console est activée grâce à l'option <code>CONSOLE</code>) affiche alors la sortie suivante:</p>

<div class="highlight"><pre><code class="bash"><span class="o">(</span>stories/calculator.story<span class="o">)</span>
  Scenario: 2+2
  Given a variable x with value 2 <span class="o">(</span>PENDING<span class="o">)</span>
  When I add 2 to x <span class="o">(</span>PENDING<span class="o">)</span>
  Then x should equal to 4 <span class="o">(</span>PENDING<span class="o">)</span>

  @Given<span class="o">(</span><span class="s2">&quot;a variable x with value 2&quot;</span><span class="o">)</span>
  @Pending
  public void givenAVariableXWithValue2<span class="o">()</span> <span class="o">{</span>
  // PENDING
  <span class="o">}</span>

  @When<span class="o">(</span><span class="s2">&quot;I add 2 to x&quot;</span><span class="o">)</span>
  @Pending
  public void whenIAdd2ToX<span class="o">()</span> <span class="o">{</span>
  // PENDING
  <span class="o">}</span>

  @Then<span class="o">(</span><span class="s2">&quot;x should equal to 4&quot;</span><span class="o">)</span>
  @Pending
  public void thenXShouldEqual4<span class="o">()</span> <span class="o">{</span>
  // PENDING
  <span class="o">}</span>
</code></pre>
</div>
<p style="text-align: justify;">Faisons un petit point du résultat obtenu et qui peut être confus au premier abord:</p>

<ul style="text-align: justify;">
	<li>Notre test <em>JUnit</em> est vert ! Ce qui est déroutant !</li>
	<li>Grâce au lanceur <em>JUnit</em>
(<code>de.codecentric.jbehave.junit.monitoring.JUnitReportingRunner</code>) la vue <em>JUnit</em> nous affiche l'intégralité des étapes qui ont été jouées: <code>BeforeStories</code>, notre scénario et les étapes <code>AfterStories.</code></li>
	<li>Toutes les étapes de notre scénario sont marquées <code>PENDING</code> et ont été ignorées lors de l'exécution du test.</li>
	<li><code>PENDING</code> signifie que les étapes présentes dans notre fichier <code>story</code> n'ont pas leurs correspondants dans le code <em>Java</em>, où les méthodes qui doivent être invoquées sont annotées avec le texte du step correspondant. C'est ce qui est d'ailleurs proposé par <em>JBehave</em> en suggestion d'implémentation dans la console. Pour mettre en échec les étapes <code>PENDING</code> et donc pour que notre test ne soit plus vert, il suffit de changer la stratégie par défaut dans la classe <code>AllStoriesTest</code> par <code>FailingUponPendingStep</code>:</li>
</ul>


<div class="highlight"><pre><code class="java">  <span class="o">...</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nf">MostUsefulConfiguration</span><span class="o">()</span> <span class="c1">//</span>
  <span class="o">.</span><span class="na">useStoryLoader</span><span class="o">(</span><span class="k">new</span> <span class="n">UTF8StoryLoader</span><span class="o">(</span><span class="n">embeddableClass</span><span class="o">))</span> <span class="c1">//</span>
  <span class="o">.</span><span class="na">useStoryReporterBuilder</span><span class="o">(</span><span class="n">storyReporter</span><span class="o">)</span> <span class="c1">//</span>
  <span class="o">.</span><span class="na">usePendingStepStrategy</span><span class="o">(</span><span class="k">new</span> <span class="n">FailingUponPendingStep</span><span class="o">())</span>
  <span class="o">.</span><span class="na">useStepMonitor</span><span class="o">(</span><span class="n">xref</span><span class="o">.</span><span class="na">getStepMonitor</span><span class="o">())</span><span class="c1">//</span>
  <span class="o">;</span>
</code></pre>
</div>
<p style="text-align: justify;">Créons donc une classe <code>bdd101.calculator.CalculatorSteps</code> qui contiendra nos premières définitions d'étapes (Steps) basées en partie sur les propositions faites par <em>JBehave</em> dans la console:</p>

<div class="highlight"><pre><code class="java"><span class="lineno"> 1</span> <span class="kn">import</span> <span class="nn">org.jbehave.core.annotations.Given</span><span class="o">;</span>
  <span class="lineno"> 2</span> <span class="kn">import</span> <span class="nn">org.jbehave.core.annotations.Named</span><span class="o">;</span>
  <span class="lineno"> 3</span> <span class="kn">import</span> <span class="nn">org.jbehave.core.annotations.Then</span><span class="o">;</span>
  <span class="lineno"> 4</span> <span class="kn">import</span> <span class="nn">org.jbehave.core.annotations.When</span><span class="o">;</span>
  <span class="lineno"> 5</span>
  <span class="lineno"> 6</span> <span class="kn">import</span> <span class="nn">bdd101.util.StepsDefinition</span><span class="o">;</span>
  <span class="lineno"> 7</span>
  <span class="lineno"> 8</span> <span class="nd">@StepsDefinition</span>
  <span class="lineno"> 9</span> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">CalculatorSteps</span> <span class="o">{</span>
  <span class="lineno">10</span>
  <span class="lineno">11</span>     <span class="nd">@Given</span><span class="o">(</span><span class="s">&quot;a variable $variable with value $value&quot;</span><span class="o">)</span>
  <span class="lineno">12</span>     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">defineNamedVariableWithValue</span><span class="o">(</span><span class="n">String</span> <span class="n">variable</span><span class="o">,</span> <span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
  <span class="lineno">13</span>         <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">();</span>
  <span class="lineno">14</span>     <span class="o">}</span>
  <span class="lineno">15</span>
  <span class="lineno">16</span>     <span class="nd">@When</span><span class="o">(</span><span class="s">&quot;I add $value to $variable&quot;</span><span class="o">)</span>
  <span class="lineno">17</span>     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addValueToVariable</span><span class="o">(</span><span class="nd">@Named</span><span class="o">(</span><span class="s">&quot;variable&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">variable</span><span class="o">,</span>
  <span class="lineno">18</span>                                    <span class="nd">@Named</span><span class="o">(</span><span class="s">&quot;value&quot;</span><span class="o">)</span><span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
  <span class="lineno">19</span>         <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">();</span>
  <span class="lineno">20</span>     <span class="o">}</span>
  <span class="lineno">21</span>
  <span class="lineno">22</span>     <span class="nd">@Then</span><span class="o">(</span><span class="s">&quot;$variable should equal to $expected&quot;</span><span class="o">)</span>
  <span class="lineno">23</span>     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">assertVariableEqualTo</span><span class="o">(</span><span class="n">String</span> <span class="n">variable</span><span class="o">,</span> <span class="kt">int</span> <span class="n">expectedValue</span><span class="o">)</span> <span class="o">{</span>
  <span class="lineno">24</span>         <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">();</span>
  <span class="lineno">25</span>     <span class="o">}</span>
  <span class="lineno">26</span> <span class="o">}</span>
</code></pre>
</div>
<p style="text-align: justify;">Relisons cette classe ligne par ligne:</p>

<ul style="text-align: justify;">
	<li><code>@StepsDefinition</code> est une annotation personnelle qui permet à la fois de marquer cette classe comme contenant des définitions d'étapes (ce qui est purement informatif) et qui <strong>permet à <em>Spring</em> de la détecter au moment où il va parcourir les classes pour la construction de son contexte</strong>; pour plus d'informations, voir la documentation de <em>Spring</em> sur l'utilisation des annotations (<a href="http://static.springsource.org/spring/docs/3.0.0.M3/spring-framework-reference/html/ch04s12.html#beans-scanning-filters">Spring - Using filters to customize scanning</a>).</li>
</ul>


<div class="highlight"><pre><code class="java"><span class="kn">import</span> <span class="nn">java.lang.annotation.Documented</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>

  <span class="nd">@Documented</span>
  <span class="nd">@Component</span>
  <span class="kd">public</span> <span class="nd">@interface</span> <span class="n">StepsDefinition</span> <span class="o">{}</span>
</code></pre>
</div>
<ul style="text-align: justify;">
	<li>Les étapes sont définies grâce à des annotations spécifiques: <code>@Given</code>, <code>@When</code> et <code>@Then</code>.</li>
	<li>La valeur de chaque annotation correspond à la phrase dans le scénario. Nous avons gardé la configuration par défaut qui spécifie que dans ces phrases, les mots commençant par <code>$ </code>désignent les variables. Ainsi, la première annotation permet de supporter les phrases suivantes:
<ul>
	<li><code>Given a variable x with value 2</code></li>
	<li><code>Given a variable y with value 17</code></li>
	<li>...</li>
</ul>
</li>
	<li>Les variables sont passées en paramètre dans le même ordre qu'elles apparaissent dans la phrase. Si cet ordre n'est pas satisfaisant, il est possible d'annoter chaque paramètre, <code>@Named</code>, pour indiquer la variable qu'il référence (Lignes 17 et 18).</li>
	<li>La conversion d'une variable dans le type du paramètre se fait automatiquement à l'aide des converteurs prédéfinis. Il est possible d'ajouter de nouveaux converteurs.</li>
	<li>Toutes nos étapes génèrent une exception dans notre implémentation initiale.</li>
</ul>
<p style="text-align: justify;"><img src="http://www.arolla.fr/blog/wp-content/uploads/2012/06/001-calculator-unsupported-step-def.png" alt="Editeur Eclipse de scenario" /></p>
<p style="text-align: justify;"><img style="float: left; margin: 5px;" src="http://www.arolla.fr/blog/wp-content/uploads/2012/06/plugin-astuce.png" alt="Astuce du plugin JBehave" width="110px" /> On peux constater qu'une fois ces étapes enregistrées, notre éditeur de scénario nous indique que toutes nos étapes sont bien définies. Les variables apparaissent avec une couleur différente mettant en évidence leurs emplacements.</p>
<p style="text-align: justify;">Exécutons à nouveau notre test:</p>
<p style="text-align: justify;"><img src="http://www.arolla.fr/blog/wp-content/uploads/2012/06/001-junit-runner.png" alt="Vue JUnit Eclipse" /></p>

<div class="highlight"><pre><code class="bash"><span class="o">(</span>stories/calculator.story<span class="o">)</span>
  Scenario: 2+2
  Given a variable x with value 2 <span class="o">(</span>FAILED<span class="o">)</span>
  <span class="o">(</span>java.lang.UnsupportedOperationException<span class="o">)</span>
  When I add 2 to x <span class="o">(</span>NOT PERFORMED<span class="o">)</span>
  Then x should equal to 4 <span class="o">(</span>NOT PERFORMED<span class="o">)</span>

  java.lang.UnsupportedOperationException
  at bdd101.calculator.CalculatorSteps.defineNamedVariableWithValue<span class="o">(</span>CalculatorSteps.java:14<span class="o">)</span>
  <span class="o">(</span>reflection-invoke<span class="o">)</span>
</code></pre>
</div>
<p style="text-align: justify;">On constate désormais que notre test est en échec, que seule la première étape à été exécutée mais qu'elle a échoué <code>FAILED</code> en générant une exception, ce qui correspond bien à notre implémentation. La suite du scénario n'a pas été exécutée: <code>NOT PERFORMED</code></p>
<p style="text-align: justify;"><img src="http://www.arolla.fr/blog/wp-content/uploads/2012/06/bdd-cycle-around-tdd-cycles.png" alt="Cycle BDD et Cycles TDD" width="400px" /></p>
<p style="text-align: justify;">Passons rapidement sur le développement de notre calculatrice (par une approche de type TDD par exemple) pour arriver à une implémentation fonctionnelle (au sens "qui fonctionne"...). Nous obtenons alors la classe <code>Calculator</code> suivante:</p>

<div class="highlight"><pre><code class="java"><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Calculator</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">context</span><span class="o">;</span>

  <span class="kd">public</span> <span class="nf">Calculator</span> <span class="o">()</span> <span class="o">{</span>
  <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;();</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">defineVariable</span><span class="o">(</span><span class="n">String</span> <span class="n">variable</span><span class="o">,</span> <span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">context</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">variable</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addToVariable</span><span class="o">(</span><span class="n">String</span> <span class="n">variable</span><span class="o">,</span> <span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
  <span class="kt">int</span> <span class="n">existing</span> <span class="o">=</span> <span class="n">getVariableValueOrFail</span><span class="o">(</span><span class="n">variable</span><span class="o">);</span>
  <span class="n">context</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">variable</span><span class="o">,</span> <span class="n">value</span> <span class="o">+</span> <span class="n">existing</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getVariableValue</span><span class="o">(</span><span class="n">String</span> <span class="n">variable</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="nf">getVariableValueOrFail</span><span class="o">(</span><span class="n">variable</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="kd">protected</span> <span class="kt">int</span> <span class="nf">getVariableValueOrFail</span><span class="o">(</span><span class="n">String</span> <span class="n">variable</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">Integer</span> <span class="n">existing</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">variable</span><span class="o">);</span>
  <span class="k">if</span><span class="o">(</span><span class="n">existing</span><span class="o">==</span><span class="kc">null</span><span class="o">)</span>
  <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span>
  <span class="s">&quot;Variable &lt;&quot;</span> <span class="o">+</span> <span class="n">variable</span> <span class="o">+</span> <span class="s">&quot;&gt; is not defined&quot;</span><span class="o">);</span>
  <span class="k">return</span> <span class="n">existing</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="o">}</span>
</code></pre>
</div>
<p style="text-align: justify;">Il est désormais nécessaire de faire le lien entre notre calculateur (<code>Calculator</code>) et la définition de nos étapes (<code>CalculatorSteps</code>).</p>
<p style="text-align: justify;"><img style="float: left; margin: 5px;" src="http://www.arolla.fr/blog/wp-content/uploads/2012/06/plugin-astuce.png" alt="Astuce du plugin JBehave" width="110px" /> Dans notre éditeur de scénario, il est possible d'accéder directement à la méthode correspondante soit par Ctrl+Clic sur l'étape concernée soit en ayant le curseur sur la ligne correspondante et en appuyant sur Ctrl+G (GO!).</p>
<div class="highlight"><pre><code class="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CalculatorSteps</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="n">Calculator</span> <span class="n">calculator</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Calculator</span> <span class="o">();</span>

  <span class="nd">@Given</span><span class="o">(</span><span class="s">&quot;a variable $variable with value $value&quot;</span><span class="o">)</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">defineNamedVariableWithValue</span><span class="o">(</span><span class="n">String</span> <span class="n">variable</span><span class="o">,</span> <span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">calculator</span><span class="o">.</span><span class="na">defineVariable</span><span class="o">(</span><span class="n">variable</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="o">...</span>
  <span class="o">}</span>
</code></pre>
</div>
<p style="text-align: justify;">En relançant notre test, nous obtenons cette fois:</p>
<p style="text-align: justify;"><img src="http://www.arolla.fr/blog/wp-content/uploads/2012/06/002-junit-runner.png" alt="Vue JUnit Eclipse" /></p>
<p style="text-align: justify;">Bon ! A ce stade, vous devriez avoir un bon aperçu du fonctionnement, faisons un petit saut dans le temps pour arriver à l'implémentation finale de nos étapes:</p>

<div class="highlight"><pre><code class="java"><span class="o">...</span>

  <span class="nd">@When</span><span class="o">(</span><span class="s">&quot;I add $value to $variable&quot;</span><span class="o">)</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addValueToVariable</span><span class="o">(</span><span class="nd">@Named</span><span class="o">(</span><span class="s">&quot;variable&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">variable</span><span class="o">,</span>
  <span class="nd">@Named</span><span class="o">(</span><span class="s">&quot;value&quot;</span><span class="o">)</span><span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">calculator</span><span class="o">.</span><span class="na">addToVariable</span><span class="o">(</span><span class="n">variable</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="nd">@Then</span><span class="o">(</span><span class="s">&quot;$variable should equal to $expected&quot;</span><span class="o">)</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">assertVariableEqualTo</span><span class="o">(</span><span class="n">String</span> <span class="n">variable</span><span class="o">,</span> <span class="kt">int</span> <span class="n">expectedValue</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">assertThat</span><span class="o">(</span><span class="n">calculator</span><span class="o">.</span><span class="na">getVariableValue</span><span class="o">(</span><span class="n">variable</span><span class="o">),</span> <span class="n">equalTo</span><span class="o">(</span><span class="n">expectedValue</span><span class="o">));</span>
  <span class="o">}</span>
</code></pre>
</div>
<p style="text-align: justify;">Avant de faire un petit point avec notre client, enrichissons un peu notre histoire en lui ajoutant de nouveaux scénarios.</p>
<p style="text-align: justify;">On commencera par un petit copier/coller (et oui, on a le droit !) pour vérifier que l'on peut utiliser d'autres noms de variables et d'autres valeurs que 2. Et même que l'on peut mixer l'utilisation de plusieurs variables.</p>

  <div class="highlight"><pre><code class="Gherkin"><span class="k">Scenario:</span><span class="nf"> 2+2 avec une variable y</span>

  <span class="k">Given </span><span class="nf">a variable y with value </span><span class="s">2</span><span class="nf"></span>
  <span class="k">When </span><span class="nf">I add </span><span class="s">2</span><span class="nf"> to y</span>
  <span class="k">Then </span><span class="nf">y should equal to </span><span class="s">4</span><span class="nf"></span>

  <span class="k">Scenario:</span><span class="nf"> 37+5 avec une variable UnBienJoli_Nom</span>

  <span class="k">Given </span><span class="nf">a variable UnBienJoli_Nom with value </span><span class="s">37</span><span class="nf"></span>
  <span class="k">When </span><span class="nf">I add </span><span class="s">5</span><span class="nf"> to UnBienJoli_Nom</span>
  <span class="k">Then </span><span class="nf">UnBienJoli_Nom should equal to </span><span class="s">42</span><span class="nf"></span>

  <span class="k">Scenario:</span><span class="nf"> 7+2 et 9+4 avec une variable y et une variable x</span>

  <span class="k">Given </span><span class="nf">a variable y with value </span><span class="s">7</span><span class="nf"></span>
  <span class="k">Given </span><span class="nf">a variable x with value </span><span class="s">9</span><span class="nf"></span>
  <span class="k">When </span><span class="nf">I add </span><span class="s">2</span><span class="nf"> to y</span>
  <span class="k">When </span><span class="nf">I add </span><span class="s">4</span><span class="nf"> to x</span>
  <span class="k">Then </span><span class="nf">x should equal to </span><span class="s">13</span><span class="nf"></span>
  <span class="k">Then </span><span class="nf">y should equal to </span><span class="s">9</span><span class="nf"></span>
</code></pre>
</div>
<p style="text-align: justify;">Hummm et si on utilise une variable qui n'existe pas ? Eh bien la réponse est à voir avec le client! Faisons un petit point avec notre client. Il nous dit que ça serait bien si on pouvait faire plusieurs additions sur la même variable.</p>

<div class="highlight"><pre><code class="Gherkin"><span class="lineno">1</span> <span class="k">Scenario:</span><span class="nf"> 37+5+6+17 </span>
  <span class="lineno">2</span>
  <span class="lineno">3</span> <span class="k">Given </span><span class="nf">a variable x with value </span><span class="s">37</span><span class="nf"></span>
  <span class="lineno">4</span> <span class="k">When </span><span class="nf">I add </span><span class="s">5</span><span class="nf"> to y</span>
  <span class="lineno">5</span> <span class="k">And </span><span class="nf">I add </span><span class="s">6</span><span class="nf"> to x</span>
  <span class="lineno">6</span> <span class="k">And </span><span class="nf">I add </span><span class="s">17</span><span class="nf"> to x</span>
  <span class="lineno">7</span> <span class="k">Then </span><span class="nf">x should equal to </span><span class="s">65</span><span class="nf"></span>
</code></pre>
</div>
<p style="text-align: justify;"><img style="float: left; margin: 5px;" src="http://www.arolla.fr/blog/wp-content/uploads/2012/06/plugin-astuce.png" alt="Astuce du plugin JBehave" width="110px" /> Dans notre éditeur de scénario, il est possible d'obtenir une complétion automatique parmi les étapes disponibles par <code>Ctrl+Espace</code>. Il est aussi possible de faire une recherche parmi toutes les étapes disponibles en pressant <code>Ctrl+J</code></p>
<p style="text-align: justify;"><img src="http://www.arolla.fr/blog/wp-content/uploads/2012/06/plugin-quick-search-001.png" alt="Plugin JBehave recherche rapide" /></p>
<p style="text-align: justify;"><img src="http://www.arolla.fr/blog/wp-content/uploads/2012/06/plugin-quick-search-002-filter.png" alt="Plugin JBehave recherche rapide avec filtre" /></p>
<p style="text-align: justify;">Relançons notre test:</p>

<div class="highlight"><pre><code class="bash">Scenario: 37+5+6+17
  Given a variable x with value 37
  When I add 5 to y
  And I add 6 to x
  And I add 17 to x
  Then x should equal to 65 <span class="o">(</span>FAILED<span class="o">)</span>
  <span class="o">(</span>java.lang.AssertionError:
  Expected: &lt;65&gt;
  got: &lt;60&gt;
  <span class="o">)</span>
</code></pre>
</div>
<p style="text-align: justify;">Humpf ! ça, c'était pas prévu ! Que s'est-il passé ? En regardant de plus près, on peut voir que l'on s'est trompé ligne 4, on ajoute 5 à la variable <code>y</code> au lieu de la variable <code>x</code>...
Ce qui soulève deux problèmes: comment se fait-il que la variable <code>y</code> existe et pourquoi n'a-t-on pas eu d'erreur ? Ce qui nous permet au passage de voir avec notre client comment il souhaite prendre en compte l'utilisation de variable non définie. Ensemble, nous définissons alors un nouveau scénario:</p>

<div class="highlight"><pre><code class="Gherkin"><span class="k">Scenario:</span><span class="nf"> Undefined variable displays error message</span>

  <span class="k">When </span><span class="nf">I add </span><span class="s">5</span><span class="nf"> to y</span>
  <span class="k">Then </span><span class="nf">the calculator should display the message &#39;Variable </span><span class="nv">&lt;y&gt;</span><span class="nf"> is not defined&#39;</span>
</code></pre>
</div>
<p style="text-align: justify;">Maintenant, intéressons-nous à notre erreur précédente: comment se fait-il que nous n'ayons pas eu d'erreur (<code>IllegalStateException)?</code> Et bien, tout simplement parce que l'un des scénarios précédent a défini cette variable, et que les classes définissant les étapes ne sont pas réinstanciées à chaque test: nous utilisons donc la même instance de <code>Calculator</code> pour tous les scénarios.</p>
<p style="text-align: justify;"><strong>Les classes définissant les étapes ne sont instanciées qu'une seule fois pour tous les fichiers <code>*.story</code> et pour tous les scénarios d'un fichier <code>story</code></strong>. Et même de manière concurrente si l'on spécifie que les scénarios peuvent être exécutés à travers plusieurs <code>Thread</code>.</p>
<p style="text-align: justify;">Cela nous amène à présenter <strong>quelques bonnes pratiques</strong>:</p>

<ul style="text-align: justify;">
	<li><strong>ne pas stocker d'états dans les classes définissant les étapes</strong></li>
	<li>utiliser les annotations <code>@BeforeStories</code>, <code>@BeforeStory</code>, <code>@BeforeScenario</code> pour réinitialiser les états entre chaque scénario. Dans le cas de tests unitaires, on pourra se contenter de réinitialiser uniquement le contexte du test avant chaque scénario <code>@BeforeScenario</code>. Tandis que dans le cas des tests d'intégration, on pourra par exemple démarrer le serveur Sélenium, ou le serveur d'application, au tout début des tests dans une méthode annotée <code>@BeforeStories</code>, réinitialiser la base de données avant chaque histoire <code>@BeforeStory</code> et réinitialiser le contexte du test avant chaque scénario <code>@BeforeScenario</code>.</li>
	<li>utiliser les annotations <code>@AfterStories</code>, <code>@AfterStory</code> et <code>@AfterScenario</code> pour fermer et nettoyer les ressources correspondantes.</li>
</ul>
<p style="text-align: justify;">Afin de garder une infrastructure de test simple qui nous permettra de travailler en environnement concurrent, nous opterons pour l'utilisation de variable <code>ThreadLocal</code> pour maintenir l'état de chaque scénario. Ainsi, deux scénarios s'exécutant en parallèle (chacun dans leur thread) disposeront chacun de leur propre contexte.</p>

<div class="highlight"><pre><code class="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CalculatorContext</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="kd">static</span> <span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">CalculatorContext</span><span class="o">&gt;</span> <span class="n">threadContext</span> <span class="o">=</span>
  <span class="k">new</span> <span class="n">ThreadLocal</span><span class="o">&lt;</span><span class="n">CalculatorContext</span><span class="o">&gt;();</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="n">CalculatorContext</span> <span class="nf">context</span><span class="o">()</span> <span class="o">{</span>
  <span class="k">return</span> <span class="n">threadContext</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="n">Calculator</span> <span class="nf">calculator</span><span class="o">()</span> <span class="o">{</span>
  <span class="k">return</span> <span class="nf">context</span><span class="o">().</span><span class="na">getCalculator</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">initialize</span><span class="o">()</span> <span class="o">{</span>
  <span class="c1">// one does not rely on ThreadLocal#initialValue()</span>
  <span class="c1">// so that one is sure only initialize create a new</span>
  <span class="c1">// instance</span>
  <span class="n">threadContext</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="k">new</span> <span class="n">CalculatorContext</span><span class="o">());</span>
  <span class="o">}</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dispose</span> <span class="o">()</span> <span class="o">{</span>
  <span class="n">threadContext</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Calculator</span> <span class="n">calculator</span><span class="o">;</span>
  <span class="kd">private</span> <span class="n">Exception</span> <span class="n">lastError</span><span class="o">;</span>

  <span class="kd">public</span> <span class="nf">CalculatorContext</span><span class="o">()</span> <span class="o">{</span>
  <span class="n">calculator</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Calculator</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">Calculator</span> <span class="nf">getCalculator</span><span class="o">()</span> <span class="o">{</span>
  <span class="k">return</span> <span class="n">calculator</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setLastError</span><span class="o">(</span><span class="n">Exception</span> <span class="n">lastError</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">this</span><span class="o">.</span><span class="na">lastError</span> <span class="o">=</span> <span class="n">lastError</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">Exception</span> <span class="nf">getLastError</span><span class="o">()</span> <span class="o">{</span>
  <span class="k">return</span> <span class="n">lastError</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="o">}</span>
</code></pre>
</div>
<p style="text-align: justify;">Modifions enfin notre classe <code>CalculatorSteps</code>:</p>

<div class="highlight"><pre><code class="java"><span class="kn">package</span> <span class="n">bdd101</span><span class="o">.</span><span class="na">calculator</span><span class="o">;</span>

  <span class="kn">import</span> <span class="nn">static</span> <span class="n">bdd101</span><span class="o">.</span><span class="na">calculator</span><span class="o">.</span><span class="na">CalculatorContext</span><span class="o">.</span><span class="na">calculator</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hamcrest</span><span class="o">.</span><span class="na">CoreMatchers</span><span class="o">.</span><span class="na">equalTo</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">hamcrest</span><span class="o">.</span><span class="na">MatcherAssert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>

  <span class="kn">import</span> <span class="nn">org.jbehave.core.annotations.AfterScenario</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">org.jbehave.core.annotations.BeforeScenario</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">org.jbehave.core.annotations.Given</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">org.jbehave.core.annotations.Named</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">org.jbehave.core.annotations.Then</span><span class="o">;</span>
  <span class="kn">import</span> <span class="nn">org.jbehave.core.annotations.When</span><span class="o">;</span>

  <span class="kn">import</span> <span class="nn">bdd101.util.StepsDefinition</span><span class="o">;</span>

  <span class="nd">@StepsDefinition</span>
  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">CalculatorSteps</span> <span class="o">{</span>

  <span class="nd">@BeforeScenario</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">inializeScenario</span><span class="o">()</span> <span class="o">{</span>
  <span class="n">CalculatorContext</span><span class="o">.</span><span class="na">initialize</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="nd">@AfterScenario</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">disposeScenario</span><span class="o">()</span> <span class="o">{</span>
  <span class="n">CalculatorContext</span><span class="o">.</span><span class="na">dispose</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="nd">@Given</span><span class="o">(</span><span class="s">&quot;a variable $variable with value $value&quot;</span><span class="o">)</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">defineNamedVariableWithValue</span><span class="o">(</span><span class="n">String</span> <span class="n">variable</span><span class="o">,</span> <span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">calculator</span><span class="o">().</span><span class="na">defineVariable</span><span class="o">(</span><span class="n">variable</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="nd">@When</span><span class="o">(</span><span class="s">&quot;I add $value to $variable&quot;</span><span class="o">)</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addValueToVariable</span><span class="o">(</span><span class="nd">@Named</span><span class="o">(</span><span class="s">&quot;variable&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">variable</span><span class="o">,</span>
  <span class="nd">@Named</span><span class="o">(</span><span class="s">&quot;value&quot;</span><span class="o">)</span><span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">calculator</span><span class="o">().</span><span class="na">addToVariable</span><span class="o">(</span><span class="n">variable</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
  <span class="o">}</span>
  <span class="o">}</span>
</code></pre>
</div>
<p style="text-align: justify;">Relançons les tests, et cette fois nous obtenons bien l'exception souhaitée:</p>

<div class="highlight"><pre><code class="bash">...

  Scenario: Undefined variable displays error message
  When I add 5 to y <span class="o">(</span>FAILED<span class="o">)</span>
  <span class="o">(</span>java.lang.IllegalStateException: Variable &lt;y&gt; is not defined<span class="o">)</span>
  Then the calculator should display the message <span class="s1">&#39;Variable y is not defined&#39;</span> <span class="o">(</span>PENDING<span class="o">)</span>
  @Then<span class="o">(</span><span class="s2">&quot;the calculator should display the message &#39;Variable y is not defined&#39;&quot;</span><span class="o">)</span>
  @Pending
  public void thenTheCalculatorShouldDisplayTheMessageVariableYIsNotDefined<span class="o">()</span> <span class="o">{</span>
  // PENDING
  <span class="o">}</span>
</code></pre>
</div>
<p style="text-align: justify;">Modifions légèrement notre classe de définitions d'étapes pour gérer l'exception:</p>

<div class="highlight"><pre><code class="java"><span class="o">...</span>
  <span class="nd">@When</span><span class="o">(</span><span class="s">&quot;I add $value to $variable&quot;</span><span class="o">)</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addValueToVariable</span><span class="o">(</span><span class="nd">@Named</span><span class="o">(</span><span class="s">&quot;variable&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">variable</span><span class="o">,</span>
  <span class="nd">@Named</span><span class="o">(</span><span class="s">&quot;value&quot;</span><span class="o">)</span><span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">try</span> <span class="o">{</span>
  <span class="n">calculator</span><span class="o">().</span><span class="na">addToVariable</span><span class="o">(</span><span class="n">variable</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">context</span><span class="o">().</span><span class="na">setLastError</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
  <span class="o">}</span>
  <span class="o">}</span>
  <span class="o">...</span>
</code></pre>
</div>
<p style="text-align: justify;">L'erreur pouvant être de nature "métier" (le code est ici simplifié), ce n'est généralement pas à une étape de type <code>Given</code> ou <code>When</code> <span style="color: #333333;">de la traiter</span>. Les assertions devraient autant que possible se situer dans les méthodes <code>Then</code>.</p>
<p style="text-align: justify;">Puis enfin, ajoutons l'étape de vérification:</p>

<div class="highlight"><pre><code class="java"><span class="o">...</span>

  <span class="nd">@Then</span><span class="o">(</span><span class="s">&quot;the calculator should display the message &#39;$errorMessage&#39;&quot;</span><span class="o">)</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">assertErrorMessageIsDisplayed</span><span class="o">(</span><span class="n">String</span> <span class="n">errorMessage</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">Exception</span> <span class="n">lastError</span> <span class="o">=</span> <span class="n">context</span><span class="o">().</span><span class="na">getLastError</span><span class="o">();</span>
  <span class="n">assertThat</span><span class="o">(</span><span class="s">&quot;Not in error situtation&quot;</span><span class="o">,</span> <span class="n">lastError</span><span class="o">,</span> <span class="n">notNullValue</span><span class="o">());</span>
  <span class="n">assertThat</span><span class="o">(</span><span class="s">&quot;Wrong error message&quot;</span><span class="o">,</span> <span class="n">lastError</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">equalTo</span><span class="o">(</span><span class="n">errorMessage</span><span class="o">));</span>
  <span class="o">}</span>
</code></pre>
</div>
<p style="text-align: justify;">Afin de s'assurer que tous nos scénarios précédents restent cohérents, nous ajoutons aussi l'étape suivante <code>the calculator should not be in error</code> à la fin de chaque scénario.</p>

<div class="highlight"><pre><code class="Gherkin"><span class="k">Scenario:</span><span class="nf"> 2+2</span>

  <span class="k">Given </span><span class="nf">a variable x with value </span><span class="s">2</span><span class="nf"></span>
  <span class="k">When </span><span class="nf">I add </span><span class="s">2</span><span class="nf"> to x</span>
  <span class="k">Then </span><span class="nf">x should equal to </span><span class="s">4</span><span class="nf"></span>
  <span class="k">And </span><span class="nf">the calculator should not be in error</span>

  <span class="k">Scenario:</span><span class="nf"> 2+2 avec une variable y</span>

  <span class="k">Given </span><span class="nf">a variable y with value </span><span class="s">2</span><span class="nf"></span>
  <span class="k">When </span><span class="nf">I add </span><span class="s">2</span><span class="nf"> to y</span>
  <span class="k">Then </span><span class="nf">y should equal to </span><span class="s">4</span><span class="nf"></span>
  <span class="k">And </span><span class="nf">the calculator should not be in error</span>

  <span class="nf">...</span>
</code></pre>
</div>
<p style="text-align: justify;">La méthode correspondante à l'étape:</p>

<div class="highlight"><pre><code class="java"><span class="o">...</span>
  <span class="nd">@Then</span><span class="o">(</span><span class="s">&quot;the calculator should not be in error&quot;</span><span class="o">)</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">assertNoErrorMessageIsDisplayed</span><span class="o">()</span> <span class="o">{</span>
  <span class="n">Exception</span> <span class="n">lastError</span> <span class="o">=</span> <span class="n">context</span><span class="o">().</span><span class="na">getLastError</span><span class="o">();</span>
  <span class="n">assertThat</span><span class="o">(</span><span class="n">lastError</span><span class="o">,</span> <span class="n">nullValue</span><span class="o">());</span>
  <span class="o">}</span>
</code></pre>
</div>
<h1 style="text-align: justify;">Conclusion</h1>
<p style="text-align: justify;">Un schéma vaut mieux qu'un long discours:</p>
<p style="text-align: justify;"><a href="http://www.modernanalyst.com/Resources/BusinessAnalystHumor/tabid/218/articleType/ArticleView/articleId/1231/Theres_an_app_for_that.aspx"><img src="http://www.arolla.fr/blog/wp-content/uploads/2012/06/Fin50s.jpg" alt="There's an app for that!" /></a></p>
<p style="text-align: justify;">En attendant le "Specs Creator", le BDD est une bonne alternative !</p>

<h1 style="text-align: justify;">Références et Liens</h1>
<p style="text-align: justify;">Le code complet est disponible ici: <a href="https://github.com/Arnauld/jbehave-get-started">jbehave-get-started</a>.</p>
<p style="text-align: justify;">Articles:</p>

<ul style="text-align: justify;">
	<li><a href="http://dannorth.net/introducing-bdd/">Dan North - Introduction to BDD</a> (traduction française par <a href="http://philippe.poumaroux.free.fr/index.php?post/2012/02/06/Introduction-au-Behaviour-Driven-Developement">Philippe Poumaroux</a>)</li>
	<li><a href="http://dannorth.net/2012/05/31/bdd-is-like-tdd-if/">Dan North - BDD is like TDD if...</a></li>
	<li><a href="http://herdingcode.com/?p=176">Herding Code #42 ~ Scott Bellware on BDD</a></li>
	<li><a href="http://lizkeogh.com/2009/11/06/translating-tdd-to-bdd/">Liz Keogh - Translating TDD to BDD</a></li>
	<li><a href="http://specificationbyexample.com/">Gojko Adzic - Specification by Example: How successful teams deliver the right software</a></li>
</ul>
<p style="text-align: justify;">Outils:</p>

<ul>
	<li style="text-align: justify;"><a href="http://jbehave.org/">JBehave</a></li>
	<li style="text-align: justify;"><a href="http://github.com/codecentric/jbehave-junit-runner">Code Centric ~ jbehave-junit-runner</a></li>
	<li style="text-align: justify;"><a href="http://github.com/Arnauld/jbehave-eclipse-plugin">JBehave Eclipse plugin</a></li>
</ul>
</section>